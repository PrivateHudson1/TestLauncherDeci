<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:TestLauncher.Views.Converters">
                    
    
    <!-- BackGround Window -->
    <SolidColorBrush x:Key="BackgroundColor" Color="#80000000"/>
    <SolidColorBrush x:Key="ButtonPlayGreen" Color="#8021780C"/>
    <SolidColorBrush x:Key="ButtonPlayGreenIsMouseOver" Color="#21780C"/>
    <SolidColorBrush x:Key="ButtonPlayRed" Color="#80780C0C"/>
    <SolidColorBrush x:Key="ButtonPlayRedIsMouseOver" Color="#780C0C"/>



    <!-- BackGround Button  -->
    <SolidColorBrush x:Key="Button.Static.Background" Color="#171717"/>
    <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#1F1E1E"/>
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="#171717"/>
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="#171717"/>

    <!-- TextBoxAuth -->
    <SolidColorBrush x:Key="TextBox.Static.Border" Color="#171717"/>
    <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#1F1E1E"/>
    <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#601212"/>


   

    <Style x:Key="GlowText" TargetType="TextBlock">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect ShadowDepth="0" Color="White" BlurRadius="10"/>
            </Setter.Value>
        </Setter>
    </Style>
   
    <Style x:Key="GreenButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource ButtonPlayGreen}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="{TemplateBinding Background}"
                            BorderThickness="1"
                            Cursor="Hand"
                            Padding="15,10"
                            CornerRadius="27"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}">

                        </ContentPresenter>

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonPlayGreenIsMouseOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonPlayGreen}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect ShadowDepth="0" Color="#21780C" BlurRadius="80"/>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="TextAuth" TargetType="Border">
        
        <Setter Property="Width" Value="370"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="CornerRadius" Value="27"/>
    </Style>

    <Style x:Key="RoundButton" TargetType="{x:Type Button}">

        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource BackgroundColor}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="{TemplateBinding Background}"
                            BorderThickness="1"
                            CornerRadius="50"
                            Cursor="Hand"
                            Padding="1,1"
                            SnapsToDevicePixels="true">
                        
                        <ContentPresenter x:Name="contentPresenter" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            
                        </ContentPresenter>
                        
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect ShadowDepth="0" Color="White" BlurRadius="3"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextBoxAuth" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{StaticResource BackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
       
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="Width" Value="370"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border2" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            SnapsToDevicePixels="True"
                            CornerRadius="27">

                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border2" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border2" Value="{StaticResource Button.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border2" Value="{StaticResource TextBox.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border2" Value="{StaticResource TextBox.Focus.Border}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="TextBoxAuthentication" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
        <Setter Property="Cursor" Value="IBeam"/>
       
        <Setter Property="FontSize" Value="25"/>
        <Style.Triggers>
            
            <Trigger Property="IsEnabled" Value="true">
                <Setter Property="Background" Value="{StaticResource Button.Pressed.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Pressed.Border}"/>
            </Trigger>
            
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource Button.MouseOver.Background}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="RedButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource ButtonPlayRed}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="{TemplateBinding Background}"
                            BorderThickness="1"
                            CornerRadius="27"
                            Cursor="Hand"
                            Padding="15,10"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}">

                        </ContentPresenter>

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonPlayRedIsMouseOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonPlayRed}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect ShadowDepth="0" Color="#780C0C" BlurRadius="100"/>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextblockStyle" TargetType="Border">
        <Setter Property="Background" Value="{StaticResource BackgroundColor}"/>
        <Setter Property="CornerRadius" Value="27"/>
    </Style>

    <Style x:Key="WindowBorderStyle" TargetType="Border">
        <Setter Property="Background" Value="{StaticResource BackgroundColor}"/>
        <Setter Property="CornerRadius" Value="27"/>
    </Style>

    <Style x:Key="LoginButton" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource BackgroundColor}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect ShadowDepth="0" Color="Gray" BlurRadius="10"/>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="{TemplateBinding Background}"
                            Width="230"
                            Height="60"
                            CornerRadius="27"
                            Cursor="Hand"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" 
                                          RecognizesAccessKey="True" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PageStyle" TargetType="Page">
        <Setter Property="Background">
            <Setter.Value>
                <ImageBrush>
                    <ImageBrush.ImageSource>
                        <BitmapImage UriSource="pack://application:,,,/Views/Resources/Images/background.jpg"/>
                    </ImageBrush.ImageSource>
                </ImageBrush>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ValleyStyle" TargetType="Page">
        <Setter Property="Background">
            <Setter.Value>
                <ImageBrush>
                    <ImageBrush.ImageSource>
                        <BitmapImage UriSource="pack://application:,,,/Views/Resources/Images/ValleyScreen.jpg"/>
                    </ImageBrush.ImageSource>
                </ImageBrush>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RoundProgressBarStyle" TargetType="{x:Type ProgressBar}"
       xmlns:sys="clr-namespace:System;assembly=mscorlib">
        <Style.Resources>
            <converters:RoundProgressPathConverter x:Key="Conv"/>
            <!-- нам понадобится пара констант -->
            <!-- доля рабиуса для внутренней части -->
            <sys:Double x:Key="RelativeThickness">0.75</sys:Double>
            <!-- просто 0 -->
            <sys:Double x:Key="Zero">0.0</sys:Double>
            <!-- просто 1 -->
            <sys:Double x:Key="One">1.0</sys:Double>
            <!-- какой процент рисовать для неопределённого состояния -->
            <sys:Double x:Key="IndeterminatePart">0.25</sys:Double>
            <!-- обычно прогресс по умолчанию зелёный -->
            <SolidColorBrush x:Key="ProgressBar.Progress" Color="#FF06B025"/>
            <!-- стандартный фон -->
            <SolidColorBrush x:Key="ProgressBar.Background" Color="#FFE6E6E6"/>
            <!-- стандартный цвет границы -->
            <SolidColorBrush x:Key="ProgressBar.Border" Color="#FFBCBCBC"/>
        </Style.Resources>
        <Setter Property="Foreground" Value="{StaticResource ProgressBar.Progress}"/>
        <Setter Property="Background" Value="{StaticResource ProgressBar.Background}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <!-- в неопределённом состоянии запускаем вращающуюся анимацию -->
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate"/>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimation 
                                        Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                        Storyboard.TargetName="Animation"
                                        From="0" To="360" Duration="0:0:2"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <!-- это фон, красим его в цвет фона-->
                        <Path Fill="{TemplateBinding Background}" Stretch="Uniform"
                          Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}">
                            <Path.Data>
                                <MultiBinding Converter="{StaticResource Conv}"
                                          ConverterParameter="{StaticResource RelativeThickness}">
                                    <!-- val=1, min=0, max=1 даёт полный круг -->
                                    <Binding Source="{StaticResource One}"/>
                                    <Binding Source="{StaticResource Zero}"/>
                                    <Binding Source="{StaticResource One}"/>
                                </MultiBinding>
                            </Path.Data>
                        </Path>
                        <Path Fill="{TemplateBinding Foreground}" Stretch="Uniform" Name="Indicator">
                            <Path.Data>
                                <MultiBinding Converter="{StaticResource Conv}"
                                          ConverterParameter="{StaticResource RelativeThickness}">
                                    <Binding Path="Value" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="Minimum" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="Maximum" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </MultiBinding>
                            </Path.Data>
                        </Path>
                        <!-- это анимировнная штука, будет показываться в неопределённом состоянии -->
                        <Path Fill="{TemplateBinding Foreground}" Stretch="Uniform" Name="Animation"
                          Visibility="Collapsed" RenderTransformOrigin="0.5,0.5">
                            <Path.Data>
                                <MultiBinding Converter="{StaticResource Conv}"
                                          ConverterParameter="{StaticResource RelativeThickness}">
                                    <Binding Source="{StaticResource IndeterminatePart}"/>
                                    <Binding Source="{StaticResource Zero}"/>
                                    <Binding Source="{StaticResource One}"/>
                                </MultiBinding>
                            </Path.Data>
                            <!-- положим пустое вращение, чтобы к нему цеплялась анимация -->
                            <Path.RenderTransform>
                                <RotateTransform/>
                            </Path.RenderTransform>
                        </Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- в случае неопределённого состояния уберём нормальный индикатор и покажем анимацию -->
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="Animation" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>